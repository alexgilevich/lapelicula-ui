@page "/"
@using LaPelicula.UI.Shared
@inject IJSRuntime JSRuntime
@inject IUserPreferencesEncoder UserPreferencesEncoder
@rendermode InteractiveServer


<PageTitle>La Pelicula – Pick a movie to watch</PageTitle>

<h1>We think you are going to like:</h1>


<a href="/settings">Adjust your preferences</a>
<div id="react-container" style="line-height: unset;"></div>

<button onclick="@SayHello">Say Hello</button>

@code {
    public record RatingByGenre(string Name, double Rating);

    private void SayHello()
    {
        Console.WriteLine("Hello");
    }
    
    [JSInvokable]
    public string Encode(List<RatingByGenre> ratingsByGenre)
    {
        var genreToRating = ratingsByGenre.ToDictionary(genreRating => genreRating.Name, genreRating => genreRating.Rating)
        var userPreferences = UserPreferences.FromDictionary(genreToRating);
        return UserPreferencesEncoder.Encode(userPreferences);
    }
    
    private DotNetObjectReference<Home>? _objectReference;

    protected override async Task OnInitializedAsync() => 
        _objectReference = DotNetObjectReference.Create(this);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("ReactUserPreferences.persistBlazorObject", _objectReference);
            var userPreferences = UserPreferencesEncoder.Decode();
            await JSRuntime.InvokeVoidAsync(
                "ReactUserPreferences.renderComponent", 
                "react-container", 
                new
                {
                    by_genre =  userPreferences.ToDictionary().Select(kvp => new RatingByGenre(kvp.Key, kvp.Value)).ToArray()
                }
            );
        }
    }
    
}