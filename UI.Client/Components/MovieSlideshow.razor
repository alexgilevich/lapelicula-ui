@using global::UI.Shared
@using LaPelicula.UI.Client.Services
@inject IJSRuntime JsRuntime
@inject IRecommendationsHttpService RecommendationsHttpService
@inject ILogger<MovieSlideshow> Logger
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<div class="recommendations-container">
    <div class="glide @(_isLoading ? "glide_loading" : string.Empty)">
        @if (_modelTrained)
        {
            <div class="gradient-overlay overlay-left"></div>
            <div class="gradient-overlay overlay-right"></div>

            <div class="glide__track" data-glide-el="track">
                <ul class="glide__slides">
                    @foreach (var recommendation in _recommendations)
                    {
                        <li class="glide__slide" style="width: 300px">
                            <a class="glide__slide-image-container" href="@($"https://www.themoviedb.org/movie/{recommendation.Movie.TmdbId}")" target="_blank">
                                <img src="@recommendation.Movie.PosterUri" alt="@recommendation.Movie.Description">
                                <div  class="glide__slide-image-overlay">
                                    <p class="glide__slide-description">@recommendation.Movie.Description</p>
                                    <p class="glide__slide-genres">@string.Join(", ", recommendation.Movie.Genres)</p>
                                </div>
                                <div class="glide__slide-rating">@recommendation.Rating.ToString("F1")</div>
                            </a>

                            <p class="glide__slide-title">@recommendation.Movie.Title (@recommendation.Movie.Year)</p>
                        </li>
                    }
                </ul>
            </div>

            <div class="glide__arrows" data-glide-el="controls">
                <button class="glide__arrow glide__arrow--left" data-glide-dir="<">❮</button>
                <button class="glide__arrow glide__arrow--right" data-glide-dir=">">❯</button>
            </div>
        }
        else
        {
            <p class="glide_model-not-trained">Model is not trained yet. Try again later...</p>       
        }
        <div class="glide__loading-overlay">
            <span class="glide__loader"></span>
        </div>
    </div>
</div>




@code {
    private bool _modelTrained = true;
    private bool _isLoading = true;
    private List<Recommendation> _recommendations = new ();
    
    [Parameter]
    public EventCallback<bool> NoCookieFound { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    public async Task RefreshAsync()
    {
        try
        {
            _isLoading = true;
            _recommendations = await RecommendationsHttpService.GetRecommendations();
        }
        catch (CookieNotSetException)
        {
            Logger.LogWarning("No cookie found");
            await NoCookieFound.InvokeAsync();
        }
        catch (ModelNotReadyException)
        {
            _modelTrained = false;
            Logger.LogWarning("Model is being trained now. Try again later...");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to get recommendations");
        }
        finally
        {
            // the loading indicator will be shown over the prerendered stubbed "recommendations" – that's a desired behavior
            // we are showing popular movies for SEO purposes
            if (OperatingSystem.IsBrowser())
                _isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ((_recommendations?.Count ?? 0) > 0)
        {
            await JsRuntime.InvokeVoidAsync(
                "MoviesSlideshow.renderComponent", 
                ".glide"
            );
        }
    }
    
}