@page "/settings"
@using CSnakes.Runtime
@using LaPelicula.UI.Server.Models
@using LaPelicula.UI.Server.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>.NET ❤️ Python – TensorFlow-based Movie Recommender – Settings</PageTitle>

<section style="margin-bottom: 50px">
    <h1>User Preferences</h1>
    <p>Rate your preferences:</p>
    
    <p>Animation: </p>
    <p>Fantasy: </p>
    
    <button class="btn btn-primary" @onclick="ApplyPreferences">Apply</button>
</section>

<section>
    <h1>System Information</h1>
    <p role="status">TensorFlow Model status: <span style="color: @(GetStatus() == TensorFlowModelStatus.Trained ? "green" : "red")">@GetStatusDescription()</span></p>
</section>

@inject ITensorFlowModelService TensorFlowModelService
@inject IUserPreferencesService UserPreferencesService

@code {

    private ViewModel GetPreferences()
    {
        return ViewModel.From(UserPreferencesService.Get());
    }
    
    private void ApplyPreferences()
    {
        
    }

    private TensorFlowModelStatus GetStatus() => TensorFlowModelService.GetStatus();

    private string GetStatusDescription() => TensorFlowModelService.GetStatus() switch
    {
        TensorFlowModelStatus.Trained => "Trained, armed and ready!",
        TensorFlowModelStatus.InProgress => "Training is in progress! Almost there!",
        TensorFlowModelStatus.Error => "Unavailable",
        _ => "Unknown"
    };

    private class ViewModel
    {
        public double Animation { get; set; }
        public double Fantasy { get; set; }

        public static ViewModel From(UserPreferences userPreferences)
        {
            return new()
            {
                Animation = userPreferences.Animation,
                Fantasy = userPreferences.Fantasy
            };
        }
        
        public UserPreferences To()
        {
            return new()
            {
                Animation = Animation,
                Fantasy = Fantasy
            };
        }
    }

}
