<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="description" content="Pick your next movie to watch tonight with carefully crafted recommendations just for you and your preferences">
  <meta property="og:type" content="website">
  <meta property="og:image" content="https://lapelicula.net/images/watching-a-movie.png">
  <meta name="twitter:image" content="https://lapelicula.net/images/watching-a-movie.png">
  <meta name="twitter:card" content="summary_large_image">
  <meta property="twitter:domain" content="lapelicula.net">
  <base href="/"/>
  <link rel="stylesheet" href="@Assets["app.css"]"/>
  <link rel="stylesheet" href="@Assets["LaPelicula.UI.Server.styles.css"]"/>
  <link rel="stylesheet" href="@Assets["lib/dist/styles.css"]"/>
  <!-- ADDITIONAL STYLESHEETS FOLLOW HERE  -->
  <ImportMap/>
  <link rel="icon" type="image/png" href="favicon.png"/>
  <HeadOutlet/>
</head>
<body>

<div data-permanent>
  <!-- workaround for blazor to not show app loading indicator every time when blazor refreshes the html content of the page, so it is shown only the first time the user opens the page  -->
  <script type="text/javascript">
    document.querySelector('body').classList.add('blazor-app_loading');
  </script>
</div>


<div class="blazor-app__loading-overlay">
  <svg class="loading-progress">
    <circle r="40%" cx="50%" cy="50%"/>
    <circle r="40%" cx="50%" cy="50%"/>
  </svg>
  <div class="loading-progress-text"></div>
</div>

<Routes/>


<script src="@Assets["lib/dist/components.bundle.js"]"></script>
<script type="text/javascript">
    // for SEO purposes prerendered "stubbed recommendations" are displayed
    // but server-side rendering is noticeable by the user in most cases by the naked eye
    // thus we have to make sure that the prerendered recommendations are displayed correctly and not get overblown in width and height
    // it's possible to do it with CSS only but it's not worth it as in this case it is necessary to simulate Glide sizing logic with CSS
    if (document.querySelector('.glide')) {
      MoviesSlideshow.renderComponent('.glide');
    }
    
    // blazor does not allow to get an html element outside of the app
    function hideAppLoadingIndicator() {
      document.querySelector('body').classList.remove('blazor-app_loading');
    }
  </script>

<script src="_framework/blazor.web.js"></script>

<!-- ADDITIONAL SCRIPTS FOLLOW HERE -->
</body>

</html>